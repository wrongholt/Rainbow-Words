'use strict';

const CONSTANTS = require('@src/utils/constants');

const ISP_URL_BASE = 'inSkillProducts';
const EMPTY_HEADERS = {};
const EMPTY_QUERY_PARAMS = {};
const NULL_PAYLOAD = null;

module.exports = (smapiHandle) => {
    
    function createIsp(vendorId, ispDefinition, callback) {
        const url = `${ISP_URL_BASE}/`;
        const payload = {
            vendorId: vendorId,
            inSkillProductDefinition: ispDefinition
        };
        smapiHandle(
            CONSTANTS.COMMAND.NAME.CREATE_ISP,
            CONSTANTS.HTTP_REQUEST.VERB.POST,
            CONSTANTS.SMAPI.VERSION.V1,
            url,
            EMPTY_QUERY_PARAMS,
            EMPTY_HEADERS,
            payload,
            callback
        );
    }

    function getIsp(ispId, stage, callback) {
        const url = `${ISP_URL_BASE}/${ispId}/stages/${stage}`;
        smapiHandle(
            CONSTANTS.COMMAND.NAME.GET_ISP,
            CONSTANTS.HTTP_REQUEST.VERB.GET,
            CONSTANTS.SMAPI.VERSION.V1,
            url,
            EMPTY_QUERY_PARAMS,
            EMPTY_HEADERS,
            NULL_PAYLOAD,
            callback
        );
    }

    function getIspSummary(ispId, stage, callback) {
        const url = `${ISP_URL_BASE}/${ispId}/stages/${stage}/summary`;
        smapiHandle(
            CONSTANTS.COMMAND.NAME.GET_ISP,
            CONSTANTS.HTTP_REQUEST.VERB.GET,
            CONSTANTS.SMAPI.VERSION.V1,
            url,
            EMPTY_QUERY_PARAMS,
            EMPTY_HEADERS,
            NULL_PAYLOAD,
            callback
        );
    }

    function updateIsp(ispId, stage, ispDefinition, eTag, callback) {
        const url = `${ISP_URL_BASE}/${ispId}/stages/${stage}`;
        const headers = eTag ? { "If-Match": eTag } : {};
        const payload = {
            inSkillProductDefinition: ispDefinition
        };
        smapiHandle(
            CONSTANTS.COMMAND.NAME.UPDATE_ISP,
            CONSTANTS.HTTP_REQUEST.VERB.PUT,
            CONSTANTS.SMAPI.VERSION.V1,
            url,
            EMPTY_QUERY_PARAMS,
            headers,
            payload,
            callback
        );
    }

    function associateIsp(ispId, skillId, callback) {
        const url = `${ISP_URL_BASE}/${ispId}/skills/${skillId}`;
        smapiHandle(
            CONSTANTS.COMMAND.NAME.ASSOCIATE_ISP,
            CONSTANTS.HTTP_REQUEST.VERB.PUT,
            CONSTANTS.SMAPI.VERSION.V1,
            url,
            EMPTY_QUERY_PARAMS,
            EMPTY_HEADERS,
            NULL_PAYLOAD,
            callback
        );
    }

    function disassociateIsp(ispId, skillId, callback) {
        const url = `${ISP_URL_BASE}/${ispId}/skills/${skillId}`;
        smapiHandle(
            CONSTANTS.COMMAND.NAME.DISASSOCIATE_ISP,
            CONSTANTS.HTTP_REQUEST.VERB.DELETE,
            CONSTANTS.SMAPI.VERSION.V1,
            url,
            EMPTY_QUERY_PARAMS,
            EMPTY_HEADERS,
            NULL_PAYLOAD,
            callback
        );
    }

    /**
     * List ISPs based on the vendor-id
     * @param {*} vendorId 
     * @param {*} productIdList 
     * @param {*} queryParams   | referenceName 
     *                          | type 
     *                          | stage 
     *                          | status 
     *                          | isAssociatedWithSkill 
     *                          | nextToken 
     *                          | maxResults 
     * @param {*} callback 
     */
    function listIspForVendor(vendorId, productIdList, queryParams, callback) {
        if (!queryParams) {
            queryParams = {};
        }
        queryParams.vendorId = vendorId;
        if (productIdList && productIdList.length > 0) {
            queryParams.productId = productIdList.filter(id => id);
        }
        const url = `${ISP_URL_BASE}`;

        smapiHandle(
            CONSTANTS.COMMAND.NAME.LIST_ISP_FOR_VENDOR,
            CONSTANTS.HTTP_REQUEST.VERB.GET,
            CONSTANTS.SMAPI.VERSION.V1,
            url,
            queryParams,
            EMPTY_HEADERS,
            NULL_PAYLOAD,
            callback
        );
    }

    /**
     * List skills based on the ISP
     * @param {*} ispId 
     * @param {*} stage 
     * @param {*} queryParams | nextToken 
     *                        | maxResults 
     * @param {*} callback 
     */
    function listSkillsForIsp(ispId, stage, queryParams, callback) {
        if (queryParams && !queryParams.hasOwnProperty('maxResults')) {
            queryParams.maxResults = CONSTANTS.ISP.NUMBERS.DEFAULT_ISP_MAX_RESULTS;
        }
        const url = `${ISP_URL_BASE}/${ispId}/stages/${stage}/skills`;
        smapiHandle(
            CONSTANTS.COMMAND.NAME.LIST_SKILLS_FOR_ISP,
            CONSTANTS.HTTP_REQUEST.VERB.GET,
            CONSTANTS.SMAPI.VERSION.V1,
            url,
            queryParams,
            EMPTY_HEADERS,
            NULL_PAYLOAD,
            callback
        );
    }

    function deleteIsp(ispId, stage, eTag, callback) {
        const url = `${ISP_URL_BASE}/${ispId}/stages/${stage}`;
        const headers = eTag ? { "If-Match": eTag } : {};
        smapiHandle(
            CONSTANTS.COMMAND.NAME.DELETE_ISP,
            CONSTANTS.HTTP_REQUEST.VERB.DELETE,
            CONSTANTS.SMAPI.VERSION.V1,
            url,
            EMPTY_QUERY_PARAMS,
            headers,
            NULL_PAYLOAD,
            callback
        );
    }

    function resetIspEntitlement(ispId, stage, callback) {
        const url = `${ISP_URL_BASE}/${ispId}/stages/${stage}/entitlement`;
        smapiHandle(
            CONSTANTS.COMMAND.NAME.RESET_ISP_ENTITLEMENT,
            CONSTANTS.HTTP_REQUEST.VERB.DELETE,
            CONSTANTS.SMAPI.VERSION.V1,
            url,
            EMPTY_QUERY_PARAMS,
            EMPTY_HEADERS,
            NULL_PAYLOAD,
            callback
        );
    }

    return {
        createIsp: createIsp,
        getIsp: getIsp,
        getIspSummary: getIspSummary,
        updateIsp: updateIsp,
        associateIsp:associateIsp,
        disassociateIsp: disassociateIsp,
        listIspForVendor: listIspForVendor,
        listSkillsForIsp: listSkillsForIsp,
        deleteIsp: deleteIsp,
        resetIspEntitlement: resetIspEntitlement
    };
};
