'use strict';

const querystring = require('querystring');

const skillApi = require('./resources/skill');
const manifestApi = require('./resources/manifest');
const modelApi = require('./resources/model');
const ispApi = require('./resources/isp');
const vendorApi = require('./resources/vendor');
const accountLinkingApi = require('./resources/account-linking');
const privateSkillApi = require('./resources/private-skill');
const historyApi = require('./resources/history');
const testApi = require('./resources/test');

const httpClient = require('@src/clients/http-client');
const oauthWrapper = require('@src/utils/oauth-wrapper');
const CONSTANTS = require('@src/utils/constants');

/**
 * Class for Alexa Skill Management API Service (SMAPI) client
 */
module.exports = class SmapiClient {

    /**
     * Constructor for SmapiClient with "profile" for authorization and "doDebug" for client setting
     * @param {object} configuration | profile
     *                               | doDebug 
     */
    constructor(configuration) {
        this.profile = configuration.profile;
        this.doDebug = configuration.doDebug;
        this._smapiRequest = this._smapiRequest.bind(this);

        this.skill = skillApi(this._smapiRequest);
        this.skill.manifest = manifestApi(this._smapiRequest);
        this.skill.model = modelApi(this._smapiRequest);
        this.skill.accountLinking = accountLinkingApi(this._smapiRequest);
        this.skill.privateSkill = privateSkillApi(this._smapiRequest);
        this.skill.history = historyApi(this._smapiRequest);
        this.skill.test = testApi(this._smapiRequest);

        this.vendor = vendorApi(this._smapiRequest);
        this.isp = ispApi(this._smapiRequest);
    }

    _smapiRequest(apiName, method, version, urlPath, queryParams, headers, payload, callback) {
        const qs = querystring.stringify(queryParams) && `?${querystring.stringify(queryParams)}`;
        const requestOptions = {
            url: `${CONSTANTS.SMAPI.ENDPOINT}/${version}/${urlPath}${qs}`,
            method: method,
            headers: headers || {},
            body: payload,
            json: payload ? true : false
        };
        // TODO: Change tokenRefreshAndRead to a method of the class once Token class is done.
        // Current tokenRefreshAndRead is short circuit style.
        oauthWrapper.tokenRefreshAndRead(requestOptions, this.profile, () => {
            httpClient.request(requestOptions, apiName, this.doDebug, callback);
        });
    }

};
