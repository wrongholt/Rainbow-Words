
'use strict';

const os = require('os');
const request = require('request');

const logger = require('@root/lib/utils/logger-utility');
const urlUtility = require('@root/lib/utils/url-utils');


/**
 * Core CLI request function with User-Agent setting.
 * 
 * @param {object} options      request options object
 * @param {string} operation    operation name for the request
 * @param {boolean} doDebug     define if debug info is needed
 * @param {function} callback  
 */
module.exports.request = (options, operation, doDebug, callback) => {
    // Validation of input parameters
    if (typeof operation !== 'string' || !operation.trim()) {
        return process.nextTick(() => {
            callback('[Fatal]: CLI request must have a non-empty operation name.');
        });
    }
    if (!urlUtility.isValidUrl(options.url)) {
        return process.nextTick(() => {
            callback('[Fatal]: CLI request must call with valid url.');
        });
    }

    // Set user-agent for each CLI request
    if (!options.headers) {
        options.headers = {};
    }
    options.headers['User-Agent'] = resolveUserAgent();

    // Make request
    request(options, (error, response) => {
        if (doDebug) {
            logger.getInstance().debug(debugContentForResponse(operation, error, response));
        }
        if (error || !response) {
            return callback(`[Error]: Failed to make request to ${operation}. Please make sure "${options.url}" is responding.`);
        } else {
            return callback(null, response);
        }
    });  
};


/**
 * Resolve User-Agent for CLI by the following the chain: 
 * (CLI Client)? - CLI Version - Node Verson - OS Type/Release
 * CLI downstream's status is decided by the ENV_VAR "ASK_DOWNSTREAM_CLIENT"
 */
function resolveUserAgent() {
    const cliUserAgentStr = `ask-cli/${require('../../package.json').version} Node/${process.version} ${os.type()}/${os.release()}`;
    if (typeof process.env.ASK_DOWNSTREAM_CLIENT === 'string' && process.env.ASK_DOWNSTREAM_CLIENT.trim()) {
        return `${process.env.ASK_DOWNSTREAM_CLIENT} (ask-cli downstream client) ${cliUserAgentStr}`;
    } else {
        return cliUserAgentStr;
    }
}


/**
 * Form the debug info object according to the error and response from each http request
 * @param {string} operation 
 * @param {string} error 
 * @param {object} response 
 */
function debugContentForResponse(operation, error, response) {
    return {
        'activity': operation,
        'error': error,
        'request-id': response.headers['x-amzn-requestid'] || null,
        'request': {
            'method': response.request.method,
            'url': response.request.href,
            'headers': response.request.headers,
            'body': response.request.body
        },
        'response': {
            'statusCode': response.statusCode,
            'statusMessage': response.statusMessage,
            'headers': response.headers
        },
        'body': response.body
    };
}
