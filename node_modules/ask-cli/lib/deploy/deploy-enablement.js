'use strict';

const apiWrapper = require('../api/api-wrapper');
const deploySkill = require('./deploy-skill');
const CONSTANTS = require('../utils/constants');
const clui = require('clui');

module.exports = {
    enable: enable
};

function enable(skillId, skillInfo, profile, doDebug, callback) {
    if (!skillId) {
        return callback('[Fatal]: Cannot find skill ID to enable.');
    }
    if (!skillInfo || !skillInfo.domainList) {
        return callback('[Fatal]: Skill information is not valid. Please make sure "apis" field in the skill.json is not empty.');
    }
    if (skillInfo.domainList.length !== 1) {
        return callback('[Warn]: Skill with multiple api domains can not be enabled. Skipping the enablement.');
    }
    if (skillInfo.domainList[0] !== 'custom') {
        return callback(`[Warn]: Skill api domain "${skillInfo.domainList[0]}" can not be enabled. Skipping the enablement.`);
    }

    const Spinner = clui.Spinner;
    const enablementSpinner = new Spinner(' Enabling the skill...');
    
    enablementSpinner.start();
    deploySkill.pollingSkillStatus(skillId, profile, doDebug, (response) => {
        enablementSpinner.stop();
        if (response.status === CONSTANTS.SKILL.BUILD_STATUS.SUCCESS) {
            apiWrapper.callEnableSkill(skillId, CONSTANTS.SKILL.STAGE.DEVELOPMENT, profile, doDebug, () => {
                callback();
            });
        } else {
            callback(`[Error]: Skill cannot be enabled when status is ${response.status}.`);
        }
    });
}
