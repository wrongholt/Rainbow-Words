'use strict';

const apiWrapper = require('./api-wrapper');
const tools = require('../utils/tools');
const betaTestUtil = require('../utils/beta-test-utils/beta-test-utility');
const profileHelper = require('../utils/profile-helper');
const CONSTANTS = require('../utils/constants');

// Public
module.exports = {
    createCommand: (commander) => {
        buildGetBetaTestCommand(commander);
        buildCreateBetaTestCommand(commander);
        buildUpdateBetaTestCommand(commander);
        buildStartBetaTestCommand(commander);
        buildEndBetaTestCommand(commander);
        buildListBetaTestersCommand(commander);
        buildAddBetaTestersCommand(commander);
        buildRemoveBetaTestersCommand(commander);
        buildSendReminderToBetaTestersCommand(commander);
        buildRequestFeedbackFromBetaTestersCommand(commander);
    }
};

// Private
function buildGetBetaTestCommand(commander) {
    commander
        .command('get-beta-test')
        .usage('<-s|--skill-id <skill-id>> [-p|--profile <profile>] [--debug]')
        .option('-s, --skill-id <skill-id>', 'skill-id for the skill')
        .option('-p, --profile <profile>', 'ask cli profile')
        .option('--debug', 'ask cli debug mode')
        .description('get the beta test')
        .action(handle);

    function handle(options) {
        if (!options.skillId) {
            console.warn('Please input required parameter: skill-id.');
            process.exit(1);
        }
        
        const profile = profileHelper.runtimeProfile(options.profile);
        apiWrapper.callGetBetaTest(options.skillId, profile, options.debug, (data) => {
            const response = tools.convertDataToJsonObject(data.body);
            if (response) {
                console.log(JSON.stringify(response, null, 2));
            }
        });
    }
}

function buildCreateBetaTestCommand(commander) {
    commander
        .command('create-beta-test')
        .usage('<-s|--skill-id <skill-id>> [-f|--feedback-email <feedback-email>] [-p|--profile <profile>] [--debug]')
        .option('-s, --skill-id <skill-id>', 'skill-id for the skill')
        .option('-f, --feedback-email <feedback-email>', 'feedback email address')
        .option('-p, --profile <profile>', 'ask cli profile')
        .option('--debug', 'ask cli debug mode')
        .description('create a beta test')
        .action(handle);

    function handle(options) {
        if (!options.skillId) {
            console.warn('Please input required parameter: skill-id.');
            process.exit(1);
        }
        
        const profile = profileHelper.runtimeProfile(options.profile);
        apiWrapper.callCreateBetaTest(options.skillId, options.feedbackEmail, profile, options.debug, (data) => {
            const response = tools.convertDataToJsonObject(data.body);
            if (response) {
                console.log('Beta test created successfully.');
            }
        });
    }
}

function buildUpdateBetaTestCommand(commander) {
    commander
        .command('update-beta-test')
        .usage('<-s|--skill-id <skill-id>> [-f|--feedback-email <feedback-email>] [-p|--profile <profile>] [--debug]')
        .option('-s, --skill-id <skill-id>', 'skill-id for the skill')
        .option('-f, --feedback-email <feedback-email>', 'feedback email address')
        .option('-p, --profile <profile>', 'ask cli profile')
        .option('--debug', 'ask cli debug mode')
        .description('update the beta test')
        .action(handle);

    function handle(options) {
        if (!options.skillId) {
            console.warn('Please input required parameter: skill-id.');
            process.exit(1);
        }
        
        const profile = profileHelper.runtimeProfile(options.profile);
        apiWrapper.callUpdateBetaTest(options.skillId, options.feedbackEmail, profile, options.debug, (data) => {
            const response = tools.convertDataToJsonObject(data.body);
            if (response) {
                console.log('Beta test updated successfully.');
            }
        });
    }
}

function buildStartBetaTestCommand(commander) {
    commander
        .command('start-beta-test')
        .usage('<-s|--skill-id <skill-id>> [-p|--profile <profile>] [--debug]')
        .option('-s, --skill-id <skill-id>', 'skill-id for the skill')
        .option('-p, --profile <profile>', 'ask cli profile')
        .option('--debug', 'ask cli debug mode')
        .description('start a beta test')
        .action(handle);

    function handle(options) {
        if (!options.skillId) {
            console.warn('Please input required parameter: skill-id.');
            process.exit(1);
        }
        
        const profile = profileHelper.runtimeProfile(options.profile);
        apiWrapper.callStartBetaTest(options.skillId, profile, options.debug, (data) => {
            const response = tools.convertDataToJsonObject(data.body);
            if (response) {
                console.log('Start beta test request submitted.');
            }
        });
    }
}

function buildEndBetaTestCommand(commander) {
    commander
        .command('end-beta-test')
        .usage('<-s|--skill-id <skill-id>> [-p|--profile <profile>] [--debug]')
        .option('-s, --skill-id <skill-id>', 'skill-id for the skill')
        .option('-p, --profile <profile>', 'ask cli profile')
        .option('--debug', 'ask cli debug mode')
        .description('end a beta test')
        .action(handle);

    function handle(options) {
        if (!options.skillId) {
            console.warn('Please input required parameter: skill-id.');
            process.exit(1);
        }
        
        const profile = profileHelper.runtimeProfile(options.profile);
        apiWrapper.callEndBetaTest(options.skillId, profile, options.debug, (data) => {
            const response = tools.convertDataToJsonObject(data.body);
            if (response) {
                console.log('End beta test request submitted.');
            }
        });
    }
}

function buildListBetaTestersCommand(commander) {
    commander
        .command('list-beta-testers')
        .usage('<-s|--skill-id <skill-id>> [--max-results <value>] [--next-token <value>] [-p|--profile <profile>] [--debug]')
        .option('-s, --skill-id <skill-id>', 'skill-id for the skill')
        .option('--max-results <value>', `max number of results returned, default is ${CONSTANTS.BETA_TEST.DEFAULT_LIST_MAX_RESULT}`)
        .option('--next-token <value>', 'token to get next page of results')
        .option('-p, --profile <profile>', 'ask cli profile')
        .option('--debug', 'ask cli debug mode')
        .description('list testers in a beta test')
        .action(handle);

    function handle(options) {
        if (!options.skillId) {
            console.warn('Please input required parameter: skill-id.');
            process.exit(1);
        }

        if (options.maxResults) {
            const maxResult = parseInt(options.maxResults);
            if (!maxResult) {
                console.error('The max-results parameter is not valid, not a number')
                process.exit(1);
            }
            if (maxResult <= 0 || maxResult > CONSTANTS.BETA_TEST.MAX_LIST_MAX_RESULT) {
                console.error(`The max-results parameter should be in the range of 1 ~ ${CONSTANTS.BETA_TEST.MAX_LIST_MAX_RESULT}.`)
                process.exit(1);
            }
        }
        
        const profile = profileHelper.runtimeProfile(options.profile);
        
        apiWrapper.callListBetaTesters(
            options.skillId, 
            options.nextToken, 
            options.maxResults, 
            profile, 
            options.debug, 
            (data) => {
            const response = tools.convertDataToJsonObject(data.body);
            if (response) {
                console.log(JSON.stringify(response, null, 2));
            }
        });
    }
}

function buildAddBetaTestersCommand(commander) {
    commander
        .command('add-beta-testers')
        .usage('<-s|--skill-id <skill-id>> <-f|--file <file-path>> [-p|--profile <profile>] [--debug]')
        .option('-s, --skill-id <skill-id>', 'skill-id for the skill')
        .option('-f, --file <file-path>', 'path to the tester email list csv file')
        .option('-p, --profile <profile>', 'ask cli profile')
        .option('--debug', 'ask cli debug mode')
        .description('add testers to a beta test')
        .action(handle);

    function handle(options) {
        if (!options.skillId) {
            console.warn('Please input required parameter: skill-id.');
            process.exit(1);
        }

        betaTestUtil.validateFile(options.file);

        const profile = profileHelper.runtimeProfile(options.profile);
        const testers = betaTestUtil.readTestersFromFile(options.file);
        
        apiWrapper.callAddBetaTesters(options.skillId, testers, profile, options.debug, () => {
            console.log('Beta testers added successfully.');
        });
    }
}

function buildRemoveBetaTestersCommand(commander) {
    commander
        .command('remove-beta-testers')
        .usage('<-s|--skill-id <skill-id>> <-f|--file <file-path>> [-p|--profile <profile>] [--debug]')
        .option('-s, --skill-id <skill-id>', 'skill-id for the skill')
        .option('-f, --file <file-path>', 'path to the tester email list csv file')
        .option('-p, --profile <profile>', 'ask cli profile')
        .option('--debug', 'ask cli debug mode')
        .description('remove testers from a beta test')
        .action(handle);

    function handle(options) {
        if (!options.skillId) {
            console.warn('Please input required parameter: skill-id.');
            process.exit(1);
        }

        betaTestUtil.validateFile(options.file);

        const profile = profileHelper.runtimeProfile(options.profile);
        const testers = betaTestUtil.readTestersFromFile(options.file);

        apiWrapper.callRemoveBetaTesters(options.skillId, testers, profile, options.debug, () => {
            console.log('Beta testers removed successfully.');
        });
    }
}

function buildSendReminderToBetaTestersCommand(commander) {
    commander
        .command('send-reminder-to-beta-testers')
        .usage('<-s|--skill-id <skill-id>> <-f|--file <file-path>> [-p|--profile <profile>] [--debug]')
        .option('-s, --skill-id <skill-id>', 'skill-id for the skill')
        .option('-f, --file <file-path>', 'path to the tester email list csv file')
        .option('-p, --profile <profile>', 'ask cli profile')
        .option('--debug', 'ask cli debug mode')
        .description('send reminder to testers in a beta test')
        .action(handle);

    function handle(options) {
        if (!options.skillId) {
            console.warn('Please input required parameter: skill-id.');
            process.exit(1);
        }

        betaTestUtil.validateFile(options.file);

        const profile = profileHelper.runtimeProfile(options.profile);
        const testers = betaTestUtil.readTestersFromFile(options.file);

        apiWrapper.callSendReminderToBetaTesters(options.skillId, testers, profile, options.debug, () => {
            console.log('Beta testers reminders sent successfully.');
        });
    }
}

function buildRequestFeedbackFromBetaTestersCommand(commander) {
    commander
        .command('request-feedback-from-beta-testers')
        .usage('<-s|--skill-id <skill-id>> <-f|--file <file-path>> [-p|--profile <profile>] [--debug]')
        .option('-s, --skill-id <skill-id>', 'skill-id for the skill')
        .option('-f, --file <file-path>', 'path to the tester email list csv file')
        .option('-p, --profile <profile>', 'ask cli profile')
        .option('--debug', 'ask cli debug mode')
        .description('request feedback from testers in a beta test')
        .action(handle);

    function handle(options) {
        if (!options.skillId) {
            console.warn('Please input required parameter: skill-id.');
            process.exit(1);
        }

        betaTestUtil.validateFile(options.file);

        const profile = profileHelper.runtimeProfile(options.profile);
        const testers = betaTestUtil.readTestersFromFile(options.file);

        apiWrapper.callRequestFeedbackFromBetaTesters(options.skillId, testers, profile, options.debug, () => {
            console.log('Beta testers feedback requested successfully.');
        });
    }
}

