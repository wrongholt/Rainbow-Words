'use strict';

const expect = require('chai').expect;
const sinon = require('sinon');

const SmapiClient = require('@src/clients/smapi-client');
const oauthWrapper = require('@src/utils/oauth-wrapper');
const httpClient = require('@src/clients/http-client');
const CONSTANTS = require('@src/utils/constants');

const triggerSkill = require('./resources/skill');
const triggerManifest = require('./resources/manifest');
const triggerModel = require('./resources/model');
const triggerAccountLinking = require('./resources/account-linking');
const triggerTest = require('./resources/test');
const triggerPrivateSkill = require('./resources/private-skill');
const triggerHistory = require('./resources/history');
const triggerIsp = require('./resources/isp');
const triggerVendor = require('./resources/vendor');

const noop = () => {};


describe('Clients test - smapi client test', () => {
    const TEST_PROFILE = 'testProfile';
    const TEST_DO_DEBUG = false;
    const smapiClient = new SmapiClient({
        profile: TEST_PROFILE,
        doDebug: TEST_DO_DEBUG
    });

    describe('# smapi client request handler', () => {
        const TEST_API_NAME = 'apiName';
        const TEST_URL_PATH = 'urlPath';
        const TEST_VERSION = 'version';
        const TEST_METHOD = 'method';

        beforeEach(() => {
            sinon.stub(oauthWrapper, 'tokenRefreshAndRead');
            sinon.stub(httpClient, 'request');
        });

        it ('| pass the request options correctly to oauthWrapper', (done) => {
            // setup
            oauthWrapper.tokenRefreshAndRead.callsFake(noop);
            // call
            smapiClient._smapiRequest(TEST_API_NAME, TEST_METHOD, TEST_VERSION, TEST_URL_PATH, {}, {}, null, noop);
            // verify
            const expectedOptions = {
                url: `${CONSTANTS.SMAPI.ENDPOINT}/${TEST_VERSION}/${TEST_URL_PATH}`,
                method: TEST_METHOD,
                headers: {},
                body: null,
                json: false
            };
            expect(oauthWrapper.tokenRefreshAndRead.args[0][0]).deep.equal(expectedOptions);
            expect(oauthWrapper.tokenRefreshAndRead.args[0][1]).equal(TEST_PROFILE);
            done();
        });

        it ('| pass the request options correctly to oauthWrapper without headers input', (done) => {
            // setup
            oauthWrapper.tokenRefreshAndRead.callsFake(noop);
            // call
            smapiClient._smapiRequest(TEST_API_NAME, TEST_METHOD, TEST_VERSION, TEST_URL_PATH, {}, null, null, noop);
            // verify
            const expectedOptions = {
                url: `${CONSTANTS.SMAPI.ENDPOINT}/${TEST_VERSION}/${TEST_URL_PATH}`,
                method: TEST_METHOD,
                headers: {},
                body: null,
                json: false
            };
            expect(oauthWrapper.tokenRefreshAndRead.args[0][0]).deep.equal(expectedOptions);
            expect(oauthWrapper.tokenRefreshAndRead.args[0][1]).equal(TEST_PROFILE);
            done();
        });

        it ('| pass the request options to the cli request after token refreshed', (done) => {
            // setup
            oauthWrapper.tokenRefreshAndRead.callsArg(2);
            // call
            smapiClient._smapiRequest(TEST_API_NAME, TEST_METHOD, TEST_VERSION, TEST_URL_PATH, {}, {}, null, noop);
            // verify
            const expectedOptions = {
                url: `${CONSTANTS.SMAPI.ENDPOINT}/${TEST_VERSION}/${TEST_URL_PATH}`,
                method: TEST_METHOD,
                headers: {},
                body: null,
                json: false
            };
            expect(httpClient.request.args[0][0]).deep.equal(expectedOptions);
            expect(httpClient.request.args[0][1]).equal(TEST_API_NAME);
            expect(httpClient.request.args[0][2]).equal(TEST_DO_DEBUG);
            done();
        });
        
        afterEach(() => {
            httpClient.request.restore();
            oauthWrapper.tokenRefreshAndRead.restore();
        });
    });

    describe('# smapi client skill APIs', () => {
        triggerSkill(smapiClient);
        triggerManifest(smapiClient);
        triggerModel(smapiClient);
        triggerAccountLinking(smapiClient);
        triggerTest(smapiClient);
        triggerPrivateSkill(smapiClient);
        triggerHistory(smapiClient);
    });

    triggerIsp(smapiClient);

    triggerVendor(smapiClient);
});
