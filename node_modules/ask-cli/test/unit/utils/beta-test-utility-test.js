'use strict';

const expect = require('chai').expect;
const sinon = require('sinon');
const betaTestUtil = require('../../../lib/utils/beta-test-utils/beta-test-utility');

const validFilePath = './src/ASKCli/test/fixture/testersList.csv';
const invalidFilePath = './src/ASKCli/test/fixture/testers.csv';
const unSupportedFile = './src/ASKCli/test/fixture/testersList.txt';

describe('utils beta-test-utility testing', () => {
    describe('# read testers from file', () => {
        it('| try to read testers email list from csv file', () => {
            const testers = betaTestUtil.readTestersFromFile(validFilePath);
            expect(testers).to.eql([
                {"emailId": "a@a.com"},
                {"emailId": "b@b.com"},
                {"emailId": "c@c.com"}
            ]);
        });
    });

    describe('# validate file', () => {
        let sandbox;
        beforeEach(() => {
            sandbox = sinon.sandbox.create();
            sandbox.stub(console, 'warn');
            sandbox.stub(process, 'exit');
        });

        afterEach(() => {
            sandbox.restore();
        });

        it('| try to validate file with valid file path', () => {
            betaTestUtil.validateFile(validFilePath);
        });
        
        it('| try to validate file with invalid file path', () => {
            betaTestUtil.validateFile(invalidFilePath);
            expect(process.exit.getCall(0).args[0]).equal(1);
        });

        it('| try to validate file with unsupported file extension', () => {
            betaTestUtil.validateFile(unSupportedFile);
            expect(process.exit.getCall(0).args[0]).equal(1);
        });
    });
});