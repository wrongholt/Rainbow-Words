'use strict';
const constants = require('./constants');
const child_process = require('child_process');
const commandRunner = require('./commandRunner');

// Public function name
module.exports = {
    callGetSkill: callGetSkill,
    callCreateSkill: callCreateSkill,
    callGetModel: callGetModel,
    callUpdateModel: callUpdateModel,
    callHeadModel: callHeadModel,
    callUpdateSkill: callUpdateSkill,
    callListSkill: callListSkill,
    callDeleteSkill: callDeleteSkill,
    callGetSkillStatus: callGetSkillStatus,
    callListVendors: callListVendors,
    callGetAccountLinking: callGetAccountLinking,
    callDeleteAccountLinking: callDeleteAccountLinking,
    callCreateAccountLinking: callCreateAccountLinking,
    callSubmit: callSubmit,
    callWithdraw: callWithdraw,
    callEnableSkill: callEnableSkill,
    callDiableSkill: callDiableSkill,
    callGetSkillEnablement: callGetSkillEnablement,
    callNew: callNew,
    callDeploy: callDeploy,
    callClone: callClone,
    callDeployYes: callDeployYes
};

// low level command
/**
 * Get model of the skill.
 * @param {String} skillId skill id
 * @param {String} stage  stage of the skill
 * @param {String} locale model locale
 * @param {String} profile ask-cli profile name
 * @param {*} callback 
 */
function callGetModel(skillId, stage, locale, profile, callback) {
    const general = {
        '--skill-id': skillId,
        '--stage': stage,
        '--locale': locale,
        '--profile': profile
    }
    commandRunner.runApiCommand(constants.apis.GET_MODEL, general, callback);
}

/**
 * Update or create model for skill.
 * @param {String} skillId skill id
 * @param {String} stage stage of the skill
 * @param {String} locale model locale
 * @param {String} filePath file path of the model file
 * @param {String} profile ask-cli profile name
 * @param {*} callback 
 */
function callUpdateModel(skillId, stage, locale, filePath, profile, callback) {
    const general = {
        '--skill-id': skillId,
        '--stage': stage,
        '--locale': locale,
        '--file': filePath,
        '--profile': profile
    };
    commandRunner.runApiCommand(constants.apis.UPDATE_MODEL, general, callback);
}

/**
 * Head model of the skill. return ETag of the current model.
 * @param {Stirng} skillId skill id 
 * @param {String} stage stage of the skill
 * @param {String} locale model locale
 * @param {String} profile ask-cli profile name
 * @param {*} callback 
 */
function callHeadModel(skillId, stage, locale, profile, callback) {
    const general = {
        '--skill-id': skillId,
        '--stage': stage,
        '--locale': locale,
        '--profile': profile
    };
    commandRunner.runApiCommand(constants.apis.HEAD_MODEL, general, callback);
} 

/**
 * Create skill with a given json file.
 * @param {Stirng} filePath file path of skill manifest json file 
 * @param {String} profile ask-cli profile name
 * @param {*} callback 
 */
function callCreateSkill(filePath, profile, callback) {
    const general = {
        '--file': filePath,
        '--profile': profile
    };
    commandRunner.runApiCommand(constants.apis.CREATE_SKILL, general, callback);
}

/**
 * Get skill with given skill id, stage and profile is optional
 * @param {String} skillId skill id
 * @param {String} stage stage of the skill
 * @param {String} profile ask-cli profile name
 * @param {*} callback 
 */
function callGetSkill(skillId, stage, profile, callback) {
    const general = {
        '--skill-id': skillId,
        '--stage': stage,
        '--profile': profile
    };
    commandRunner.runApiCommand(constants.apis.GET_SKILL, general, callback);
}

/**
 * Update skill with a skill mainfest file
 * @param {String} skillId skill id 
 * @param {String} stage stage of the skill
 * @param {String} filePath file path of the skill manifest file
 * @param {String} profile ask-cli profile name
 * @param {*} callback 
 */
function callUpdateSkill(skillId, stage, filePath, profile, callback) {
    const general = {
        '--skill-id': skillId,
        '--stage': stage,
        '--file': filePath,
        '--profile': profile
    };
    commandRunner.runApiCommand(constants.apis.UPDATE_SKILL, general, callback);
}

/**
 * List all the skills from the given profile/vendor id.
 * @param {String} profile ask-cli profile name
 * @param {*} callback 
 */
function callListSkill(profile, callback) {
    const general = {
        '--profile': profile
    };
    commandRunner.runApiCommand(constants.apis.LIST_SKILL, general, callback);
}

/**
 * Get skill status.
 * @param {String} skillId skill id
 * @param {String} profile ask-cli profile name
 * @param {*} callback 
 */
function callGetSkillStatus(skillId, profile, callback) {
    const general = {
        '--skill-id': skillId,
        '--profile': profile
    };
    commandRunner.runApiCommand(constants.apis.GET_SKILL_STATUS, general, callback);
}

/**
 * Delete skill given a skill id.
 * @param {String} skillId skill id
 * @param {String} profile ask-cli profile name
 * @param {*} callback 
 */
function callDeleteSkill(skillId, profile, callback) {
    const general = {
        '--skill-id': skillId,
        '--profile': profile
    };
    commandRunner.runApiCommand(constants.apis.DELETE_SKILL, general, callback);
}

/**
 * Get vendor id from the given profile.
 * @param {String} profile ask-cli profile name
 * @param {*} callback 
 */
function callListVendors(profile, callback) {
    const general = {
        '--profile': profile
    };
    commandRunner.runApiCommand(constants.apis.LIST_VENDORS, general, callback);
}

/**
 * Create and update account linking for given skill.
 * @param {String} skillId skill id
 * @param {String} stage stage of the skill
 * @param {String} profile ask-cli profile name
 * @param {*} callback 
 */
function callCreateAccountLinking(skillId, stage, profile, callback) {
    const general = {
        '--skill-id': skillId,
        '--stage': stage,
        '--profile': profile
    };
    //TODO: find a way to do interactive shell 
}

/**
 * Get account linking from a given skill id
 * @param {String} skillId skill id
 * @param {String} stage stage of the skill id
 * @param {String} profile ask-cli profile name
 * @param {*} callback 
 */
function callGetAccountLinking(skillId, stage, profile, callback) {
    const general = {
        '--skill-id': skillId,
        '--stage': stage,
        '--profile': profile
    };
    commandRunner.runApiCommand(constants.apis.GET_ACCOUNT_LINKING, general, callback);
}

/**
 * Delete account linking from a given skill id 
 * @param {String} skillId skill id
 * @param {String} stage stage of the skill id
 * @param {String} profile ask-cli profile name
 * @param {*} callback 
 */
function callDeleteAccountLinking(skillId, stage, profile, callback) {
    const general = {
        '--skill-id': skillId,
        '--stage': stage,
        '--profile': profile
    };
    commandRunner.runApiCommand(constants.apis.DELETE_ACCOUNT_LINKING, general, callback);
}

/**
 * Submit skill for certification.
 * @param {String} skillId skill id
 * @param {String} profile ask-cli profile name
 * @param {*} callback 
 */
function callSubmit(skillId, profile, callback) {
    const general = {
        '--skill-id': skillId,
        '--profile': profile
    };
    commandRunner.runApiCommand(constants.apis.SUBMIT, general, callback);
}

/**
 * Withdraw skill in certification.
 * @param {String} skillId skill id
 * @param {String} profile ask-cli profile name
 * @param {*} callback 
 */
function callWithdraw(skillId, profile, callback) {
    const general = {
        '--skill-id': skillId,
        '--profile': profile
    };
    //TODO: interactive shell
}

/**
 * Enable skill
 * @param {String} skillId skill id
 * @param {String} stage stage of skill id
 * @param {String} profile ask-cli profile name
 * @param {*} callback 
 */
function callEnableSkill(skillId, stage, profile, callback) {
    const general = {
        '--skill-id': skillId,
        '--stage': stage,
        '--profile': profile
    };
    commandRunner.runApiCommand(constants.apis.ENABLE_SKILL, general, callback);
}

/**
 * Diable skill
 * @param {String} skillId skill id
 * @param {String} stage stage of the skill id
 * @param {String} profile ask-cli profile name
 * @param {*} callback 
 */
function callDiableSkill(skillId, stage, profile, callback) {
    const general = {
        '--skill-id': skillId,
        '--stage': stage,
        '--profile': profile
    };
    commandRunner.runApiCommand(constants.apis.DISABLE_SKILL, general, callback);
}

/**
 * Get skill enablement, return status of the skill, is enable or disable
 * @param {String} skillId skill id
 * @param {String} stage stage of the skill
 * @param {String} profile ask-cli profile name
 * @param {*} callback 
 */
function callGetSkillEnablement(skillId, stage, profile, callback) {
    const general = {
        '--skill-id': skillId,
        '--stage': stage,
        '--profile': profile
    };
    commandRunner.runApiCommand(constants.apis.GET_SKILL_ENABLEMENT, general, callback);
}

// hight level command
/**
 * Create new skill project into local file system
 * @param {String} template template name
 * @param {String} url skill tempalte url
 * @param {String} skillName skill name
 * @param {String} profile ask-cli profile name
 * @param {String} lambdaName lambda name
 * @param {*} callback 
 */
function callNew(template, url, skillName, profile, lambdaName,  callback) {
    const general = {
        '--template': template,
        '--url': url,
        '--skill-name': skillName,
        '--profile': profile,
        '--lambda-name': lambdaName
    };
    commandRunner.askCommandRunner(constants.hightLevel.NEW, general, callback);
}

/**
 * Deploy skill within current file directroy
 * @param {String} target deploy target skill, model, lambda
 * @param {String} profile ask-cli profile name
 * @param {*} callback 
 */
function callDeploy(target, profile, callback) {
    const general = {
        '--target': target,
        '--profile': profile
    };
    commandRunner.askCommandRunner(constants.hightLevel.DEPLOY, general, callback);
}


/**
 * Deploy skill within current file directroy
 * @param {String} target deploy target skill, model, lambda
 * @param {String} profile ask-cli profile name
 * @param {*} callback 
 */
function callDeployYes(target, profile, callback) {
    const general = {
        '--target': target,
        '--profile': profile
    };

    let subfix = '';
    for (let key of Object.keys(general)) {
        if (general[key]) {
            subfix += `${key}  ${general[key]} `;
        }
    }

    commandRunner.executeCommand('echo Y | ' + constants.hightLevel.ASK_PREFIX + constants.hightLevel.DEPLOY + subfix , callback);
}

/**
 * Clone a skill, skill id is optional
 * @param {String} skillId skill id
 * @param {String} profile ask-cli profile name
 * @param {*} callback 
 */
function callClone(skillId, profile,  callback) {
    const general = {
        '--skill-id': skillId,
        '--profile': profile
    };
    commandRunner.askCommandRunner(constants.hightLevel.CLONE, general, callback);
}