'use strict';

const expect = require('chai').expect;
const cliWrapper = require('./utils/cli-wrapper');
const constants = require('./utils/constants');
const message = require('./utils/messages');
const fs = require('fs-extra');
const commandRunner = require('./utils/commandRunner');
const responseParser = require('./utils/response-parser');
const path = require("path");
const TIMEOUT = 10000000;
const process = require('process');
const skillId = constants.testData.CLONE_SKILL_ID;
let skillName;

describe('test clone an exisiting skill project and deploy skill', function () {
    this.timeout(TIMEOUT);
    it('| ask clone with skill id', (done) => {
        cliWrapper.callClone(skillId, constants.testData.PROFILE, (error, stdout, stderr, code) => {
            if (error) {
                done(error);
            } else {
                skillName = responseParser.getSkillName(stdout);
                expect(fs.existsSync(skillName)).equal(true);
                expect(fs.existsSync(skillName + '/skill.json')).equal(true);
                expect(fs.existsSync(skillName + '/models')).equal(true);
                expect(fs.existsSync(skillName + '/lambda')).equal(true);
                expect(fs.existsSync(skillName + '/models/en-US.json')).equal(true);
                done();
            }
        });
    });

    it('| ask deploy skill', (done) => {
        const subdir = path.join('./', skillName);
        process.chdir(subdir);
        callDeployWithYes(null, constants.testData.PROFILE, (error, stdout, stderr) => {
            if (error) {
                done(error);
            } else {
                let deployResponse = stdout;
                expect(deployResponse.indexOf(message.DEPLOY_SKILL_MSG) > -1).equal(true);
                expect(deployResponse.indexOf(message.DEPLOY_MODEL_MSG) > -1).equal(true);
                // check error code
                done();
            }
        });
    });

    it('| ask deploy skill with skill target', (done) => {
        callDeployWithYes('skill', constants.testData.PROFILE, (error, stdout, stderr) => {
            if (error) {
                done(error);
            } else {
                expect(stdout.indexOf(message.DEPLOY_SKILL_MSG) > -1).equal(true);
                // check error code
                done();
            }
        });
    });

    it('| ask deploy skill with model target', (done) => {
        callDeployWithYes('model', constants.testData.PROFILE, (error, stdout, stderr) => {
            if (error) {
                done(error);
            } else {
                expect(stdout.indexOf(message.DEPLOY_MODEL_MSG) > -1).equal(true);
                // check error code
                done();
            }
        });
    });

    after('tear down', function () {
        this.timeout(TIMEOUT);
        process.chdir('..');
        fs.remove(skillName);
    });

});

/**
 * Deploy skill within current file directroy
 * @param {String} target deploy target skill, model, lambda
 * @param {String} profile ask-cli profile name
 * @param {*} callback 
 */
function callDeployWithYes(target, profile, callback) {
    const general = {
        '--target': target,
        '--profile': profile
    };

    let subfix = '';
    for (let key of Object.keys(general)) {
        if (general[key]) {
            subfix += `${key}  ${general[key]} `;
        }
    }
    //if optional
    commandRunner.executeCommand('echo Y | ' + constants.hightLevel.ASK_PREFIX + constants.hightLevel.DEPLOY + subfix , callback);
}