'use strict';

const expect = require('chai').expect;
const cliWrapper = require('./utils/cli-wrapper');
const constants = require('./utils/constants');
const message = require('./utils/messages');
const responseParser = require('./utils/response-parser');
const fs = require('fs-extra');
const timeout = 10000000;
const path = require("path");
let skillId;
let skillName;

describe('test create new skill project and deploy skill', function () {
    this.timeout(timeout);
    it('| ask new with skill name', (done) => {
        skillName = constants.testData.SKILL_NAME;
        cliWrapper.callNew(null, null, skillName, constants.testData.PROFILE, null, (error, stdout, stderr, code) => {
            if (error) {
                done(error);
            } else {
                let createNewResponse = stdout;
                expect(createNewResponse.includes(message.NEW_PROJECT_MSG)).equal(true);
                expect(fs.existsSync(skillName)).equal(true);
                expect(fs.existsSync(skillName + '/skill.json')).equal(true);
                expect(fs.existsSync(skillName + '/models')).equal(true);
                expect(fs.existsSync(skillName + '/lambda')).equal(true);
                expect(fs.existsSync(skillName + '/models/en-US.json')).equal(true);
                done();
            }
        });
    });

    it('| ask deploy skill', (done) => {
        const subdir = path.join('./', skillName);
        process.chdir(subdir);
        cliWrapper.callDeploy(null, constants.testData.PROFILE, (error, stdout, stderr) => {
            if (error) {
                done(error);
            } else {
                let deployResponse = stdout;
                skillId = responseParser.getSkillID(deployResponse);
                expect(deployResponse.indexOf(message.DEPLOY_SKILL_MSG) > -1).equal(true);
                expect(deployResponse.indexOf(message.DEPLOY_MODEL_MSG) > -1).equal(true);
                // check error code
                done();
            }
        });
    });

    it('| ask deploy skill with skill target', (done) => {
        cliWrapper.callDeploy('skill', constants.testData.PROFILE, (error, stdout, stderr) => {
            if (error) {
                done(error);
            } else {
                expect(stdout.indexOf(message.DEPLOY_SKILL_MSG) > -1).equal(true);
                // check error code
                done();
            }
        });
    });

    it('| ask deploy skill with model target', (done) => {
        cliWrapper.callDeploy('model', constants.testData.PROFILE, (error, stdout, stderr) => {
            if (error) {
                done(error);
            } else {
                expect(stdout.indexOf(message.DEPLOY_MODEL_MSG) > -1).equal(true);
                // check error code
                done();
            }
        });
    });


    after('tear down', (done) => {
        this.timeout(timeout);
        process.chdir('..');
        fs.remove('./' + skillName);
        //TODO: remove lambda function
        cliWrapper.callDeleteSkill(skillId, constants.testData.PROFILE, (error, stdout, stderr) => {
            if (error) {
                console.log(error);
                done(error);
            } else {
                expect(stdout).equal(message.DELETE_SKILL);
                // exit code should be 0
                done();
            }
        });
    });
});