'use strict';

const expect = require('chai').expect;
const constants = require('./utils/constants');
const cliWrapper = require('./utils/cli-wrapper');
const message = require('./utils/messages');
const responseParser = require('./utils/response-parser');
const fs = require("fs");
const os = require('os');
let skillId;
const timeout = 80000;

describe('# list vendors', function () {
    this.timeout(timeout);
    it('| list vendors test with profile', (done) => {
        cliWrapper.callListVendors(constants.testData.PROFILE, (error, stdout, stderr) => {
            if (error) {
                console.log(error);
                done(error);
            } else {
                let actualVendorList = responseParser.getListVendorID(stdout);
                fs.readFile(os.homedir() + "/.ask/cli_config", 'utf8', function (err, data) {
                    if (err) throw err;
                    const profileInfo = JSON.parse(data);
                    const expectedVendorId = profileInfo['profiles'][constants.testData.PROFILE]['vendor_id'];
                    expect(actualVendorList).contains(expectedVendorId);
                });
                done();
            }
        });
    });

    it('| list vendor with invalid profile', (done) => {
        cliWrapper.callListVendors(constants.testData.INVALID_PROFILE, (error, stdout, stderr) => {
            expect(error);
            expect(stderr.startsWith(message.INVALID_PROFILE_MSG) > -1).equal(true);
            done();
        });
    });
});